Render BUild Command: npm install && npm run build

Removed from package.json: "start": "react-scripts start",

Backend: node server.js
FrontEnd: npm start


Before pushing

npm run build
npm run deploy

Pushing to github

git status


git add .
git commit -m ""
git push origin main





*************************************App.css******************************************
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4; /* Background color */
}

/* Main container */
.app {
  text-align: center;
  margin: 20px;
}

/* Form styles */
form {
  margin: 20px 0;
}

input {
  padding: 10px;
  width: 200px; /* Default width */
  margin-right: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  padding: 10px;
  border: none;
  border-radius: 5px;
  background-color: #007bff;
  color: white;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

/* Quote display styles */
.quote-display {
  margin-top: 20px;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
  background-color: #f9f9f9;
}

/* Responsive styles */
@media (max-width: 600px) {
  input {
    width: 100%; /* Full width on small screens */
    margin-bottom: 10px; /* Space between input and button */
  }

  button {
    width: 100%; /* Full width on small screens */
  }

  .quote-display {
    padding: 15px; /* Add more padding on small screens */
    margin: 0; /* Remove margin on small screens */
    border-radius: 10px; /* More rounded corners */
  }

  h1 {
    font-size: 24px; /* Adjust heading size for small screens */
  }

  h2 {
    font-size: 20px; /* Adjust subheading size */
  }
}

/* Larger screens */
@media (min-width: 601px) {
  input {
    width: 200px; /* Default width on larger screens */
  }

  button {
    width: auto; /* Auto width on larger screens */
  }
}


**************************************App.js**********************************************
import React, { useState } from 'react';
import axios from 'axios';
import './App.css'; // Custom styles

const QuoteDisplay = ({ quote }) => {
    if (!quote) return null;

    return (
        <div className="quote-display">
            <h2>Quote Information</h2>
            <p><strong>Symbol:</strong> {quote.symbol}</p>
            <p><strong>Price:</strong> ${quote.regularMarketPrice.toFixed(2)}</p>
            <p><strong>Market Cap:</strong> ${quote.marketCap ? quote.marketCap.toLocaleString() : 'N/A'}</p>
            <p><strong>P/E Ratio:</strong> {quote.trailingPE ? quote.trailingPE.toFixed(2) : 'N/A'}</p>
            <p><strong>Change:</strong> {quote.regularMarketChange} ({quote.regularMarketChangePercent}%)</p>
            {/* Additional metrics can be added here */}
        </div>
    );
};

const App = () => {
    const [symbol, setSymbol] = useState('');
    const [quote, setQuote] = useState(null);

    const fetchQuote = async () => {
        try {
            const response = await axios.get(`http://localhost:3001/quote/${symbol}`);
            console.log("Quote response:", response.data);
            setQuote(response.data);
        } catch (error) {
            console.error("Error fetching quote:", error);
            setQuote(null);
        }
    };
    

    return (
        <div className="app">
            <h1>Stock Analysis</h1>
            <input
                type="text"
                value={symbol}
                onChange={(e) => setSymbol(e.target.value)}
                placeholder="Enter stock symbol"
            />
            <button onClick={fetchQuote}>Get Quote</button>

            <QuoteDisplay quote={quote} />
        </div>
    );
};

export default App;

************************************server.js********************************************
const express = require('express');
const cors = require('cors');
const yahooFinance = require('yahoo-finance2').default;
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3001; // Use environment variable or default to 3001

// Middleware for CORS and JSON parsing
app.use(cors());
app.use(express.json());

// Root route
app.get('/', (req, res) => {
    res.send('Welcome to the Stock Analysis API!');
});

// Route for fetching stock quotes
app.get('/quote/:symbol', async (req, res) => {
    const symbol = req.params.symbol;
    console.log(`Fetching quote for symbol: ${symbol}`); // Log the requested symbol
    try {
        const quote = await yahooFinance.quote(symbol);
        console.log('Quote fetched:', quote); // Log the fetched quote
        res.json(quote);
    } catch (error) {
        console.error("Error fetching quote:", error); // Log the error
        res.status(500).json({ error: 'Failed to fetch quote' });
    }
});

// Route for fetching financial statements
app.get('/financials/:symbol', async (req, res) => {
    const symbol = req.params.symbol;
    try {
        const balanceSheet = await yahooFinance.balanceSheet(symbol);
        const cashflowStatement = await yahooFinance.cashflowStatement(symbol);
        res.json({ balanceSheet, cashflowStatement });
    } catch (error) {
        console.error("Error fetching financial data:", error); // Log the error
        res.status(500).json({ error: 'Failed to fetch financial data' });
    }
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port} and CORS is enabled`);
});

************************************index.js**********************************************

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'; // Importing global styles
import App from './App'; // Importing the main App component


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

********************************index.css***********************************************
/* body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
} */

/* index.css */

/* Resets some default browser styles */
body {
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif; /* Set a default font for the app */
  background-color: #f4f4f4; /* Background color */
}

/* Styles for the main container */
#root {
  max-width: 800px; /* Limit the width of the main container */
  margin: 0 auto; /* Center the container */
  padding: 20px; /* Add padding */
}

/* Additional styles can be added here */
************************************************package.json**************************************
{
  "name": "stocks_analysis",
  "version": "0.1.0",
  "private": true,
  "homepage": "https://PatelDev14.github.io/Stock-Analysis",
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "cors": "^2.8.5",
    "express": "^4.21.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "^5.0.1",
    "semver": "^7.6.3",
    "serve": "^14.2.4",
    "web-vitals": "^2.1.4",
    "yahoo-finance2": "^2.13.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
  "engines": {
    "node": "18.x"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "gh-pages": "^6.2.0"
  }
}
